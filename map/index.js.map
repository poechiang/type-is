{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["import extend from 'extend';\n\nimport getType from './lib/type.js';\n\nimport isArgs from './lib/isArgs.js';\n\nimport isArray from './lib/isArray.js';\n\nimport isBool from './lib/isBool.js';\n\nimport isDate from './lib/isDate.js';\n\nimport isEmpty from './lib/isEmpty.js';\n\nimport isError from './lib/isError.js';\n\nimport isFunction from './lib/isFunction.js';\n\nimport isObject from './lib/isObject.js';\n\nimport isNull from './lib/isNull.js';\n\nimport isNumber from './lib/isNumber.js';\n\nimport isPromise from './lib/isPromise.js';\n\nimport isRegExp from './lib/isRegExp.js';\n\nimport isString from './lib/isString.js';\n\nimport isSymbol from './lib/isSymbol.js';\n\nimport isUndefined from './lib/isUndefined.js';\n\nimport isWindow from './lib/isWindow.js';\n\nconst is = function ( value ) {\n    const fns = {\n        args: ( ) => isArgs( value ),\n        array: ( ) => isArray( value ),\n        bool: ( ) => isBool( value ),\n        date: ( ) => isDate( value ),\n        empty: ( ) => isEmpty( value ),\n        error: ( ) => isError( value ),\n        function: ( ) => isFunction( value ),\n        object: ( ) => isObject( value ),\n        promise: ( ) => isPromise( value ),\n        null: ( ) => isNull( value ),\n        number: ( ) => isNumber( value ),\n        regexp: ( ) => isRegExp( value ),\n        symbol: ( ) => isSymbol( value ),\n        string: ( ) => isString( value ),\n        undefined: ( ) => isUndefined( value ),\n        window: ( ) => isWindow( value ),\n        type: ( ) => getType( value )\n    };\n    fns.args.empty = ( ) => isArgs.empty( value );\n    fns.array.empty = ( ) => isArray.empty( value );\n    fns.array.like = ( ) => isArray.like( value );\n    fns.number.float = ( ) => isNumber.float( value );\n    fns.number.infinity = ( ) => isNumber.infinity( value );\n    fns.number.int = ( ) => isNumber.int( value );\n    fns.number.even = ( ) => isNumber.even( value );\n    fns.number.odd = ( ) => isNumber.odd( value );\n    fns.number.nan = ( ) => isNumber.nan( value );\n    fns.object.empty = ( ) => isObject.empty( value );\n    fns.object.plain = ( ) => isObject.plain( value );\n    fns.string.empty = ( ) => isString.empty( value );\n    return fns;\n}\n\n\n\n\nextend( true, is, {\n    args: isArgs,\n    array: isArray,\n    bool: isBool,\n    date: isDate,\n    empty: isEmpty,\n    error: isError,\n    function: isFunction,\n    object: isObject,\n    promise: isPromise,\n    null: isNull,\n    number: isNumber,\n    regexp: isRegExp,\n    symbol: isSymbol,\n    string: isString,\n    undefined: isUndefined,\n    widnow: isWindow,\n    type: getType,\n} )\n\nexport default is;"],"file":"../index.js"}