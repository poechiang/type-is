{"version":3,"names":[],"mappings":"","sources":["proto.js"],"sourcesContent":["\"use strict\"\nimport extend from 'extend';\nimport fnToStr from '../core/fnToStr.js';\nimport getTypeRegex from '../core/getTypeRegex.js';\n\nimport getType from './type.js';\n\nimport isArgs from './isArgs.js';\n\nimport isArray from './isArray.js';\n\nimport isBool from './isBool.js';\n\nimport isDate from './isDate.js';\n\nimport isEmpty from './isEmpty.js';\n\nimport isError from './isError.js';\n\nimport isFunction from './isFunction.js';\n\nimport isObject from './isObject.js';\n\nimport isNumber from './isNumber.js';\n\nimport isPromise from './isPromise.js';\n\nimport isRegExp from './isRegExp.js';\n\nimport isString from './isString.js';\n\nimport isSymbol from './isSymbol.js';\n\nimport isWindow from './isWindow.js';\n\nconst extendObj = function ( ...objects ) {\n    const [ deep, ...list ] = objects;\n    if ( typeof deep === 'object' ) {\n        return extend( this, deep, ...list )\n    } else {\n        return extend( deep, this, ...list )\n    }\n}\n\nif ( !Object.prototype.extend ) {\n    Object.defineProperty( Object.prototype, 'extend', { value: extendObj } )\n}\n\nif ( !Object.extend ) {\n    Object.defineProperty( Object, 'extend', { value: extendObj } )\n}\nif ( !Object.type ) {\n    Object.defineProperty( Object, 'type', {\n        value: function ( ) {\n            return getType( this );\n        }\n    } )\n}\n\nif ( !Object.prototype.is ) {\n    Object.defineProperty( Object.prototype, 'is', {\n        value: function ( type ) {\n            return getTypeRegex( type ).test( fnToStr.call( this ) );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isArgs', {\n        value: function ( ) {\n            return isArgs( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isDate', {\n        value: function ( ) {\n            return isDate( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isEmptyArgs', {\n        value: function ( ) {\n            return isArgs.empty( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isArray', {\n        value: function ( ) {\n            return isArray( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isEmptyArray', {\n        value: function ( ) {\n            return isArray.empty( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'likeArray', {\n        value: function ( ) {\n            return isArray.like( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isBool', {\n        value: function ( ) {\n            return isBool( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isEmpty', {\n        value: function ( ) {\n            return isEmpty( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isError', {\n        value: function ( ) {\n            return isError( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isFunction', {\n        value: function ( ) {\n            return isFunction( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isObject', {\n        value: function ( ) {\n            return isObject( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isEmptyObject', {\n        value: function ( ) {\n            return isObject.empty( this );\n        }\n    } )\n\n\n    Object.defineProperty( Object.prototype, 'isPromise', {\n        value: function ( ) {\n            return isPromise( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isPlainObject', {\n        value: function ( ) {\n            return isObject.plain( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isNumber', {\n        value: function ( ) {\n            return isNumber( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isFloatNumber', {\n        value: function ( ) {\n            return isNumber.float( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isIntNumber', {\n        value: function ( ) {\n            return isNumber.int( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isEvenIntNumber', {\n        value: function ( ) {\n            return isNumber.even( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isOddIntNumber', {\n        value: function ( ) {\n            return isNumber.odd( this );\n        }\n    } )\n\n\n    Object.defineProperty( Object.prototype, 'isRegExp', {\n        value: function ( ) {\n            return isRegExp( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isSymbol', {\n        value: function ( ) {\n            return isSymbol( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isString', {\n        value: function ( ) {\n            return isString( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isEmptyString', {\n        value: function ( ) {\n            return isString.empty( this );\n        }\n    } )\n\n    Object.defineProperty( Object.prototype, 'isWindow', {\n        value: function ( ) {\n            return isWindow( this );\n        }\n    } )\n}"],"file":"../lib/proto.js"}